
class Ko5hianConfiguration {
    def outPackage
    def viewGroups
    def views
}

project.metaClass.ko5hian = { Closure conf ->
    def configuration = new Ko5hianConfiguration()

    conf.delegate = configuration
    conf()

    def parsedConfiguration = parseConfiguration(configuration)

    def generator = new Ko5hianGenerator(
            /* outDir = */ file("$buildDir/generated/source/ko5hian/src/"),
            /* conf   = */ parsedConfiguration)

    generator.writeRuntime()
    generator.writeKo5hian()
}

// =============================================================================

class ParsedConfiguration {
    String outPackage
    List<ViewGroupConfiguration> viewGroups
    List<ViewConfiguration> views

    static class ViewGroupConfiguration {
        int blankCount
        String fullyClassName
        String className
        String lParamsClassName
        String lParamsInstantiatorExpression
    }

    static class ViewConfiguration {
        String fullyClassName
        String className
        String instantiatorExpression
    }
}

static ParsedConfiguration parseConfiguration(Ko5hianConfiguration conf) {
    def outPackage

    if (conf.outPackage instanceof String) {
        outPackage = conf.outPackage
    } else {
        outPackage = 'ko5hian'
    }

    // --------

    def viewGroups = []

    if (conf.viewGroups instanceof List) {
        for (def viewGroupConf : conf.viewGroups) {
            if (viewGroupConf instanceof String) {
                viewGroupConf = [ className: viewGroupConf ]
            }

            if (!(viewGroupConf instanceof Map)) continue

            def fullyClassName = viewGroupConf['className']

            if (!(fullyClassName instanceof String)) continue
            if (fullyClassName.endsWith('.')) continue

            def className = fullyClassName.split('\\.').last()

            def lParamsClassName = viewGroupConf['lParamsClassName'] ?:
                    "${fullyClassName}.LayoutParams"

            def lParamsInstantiatorExpression = viewGroupConf['lParamsInstantiation'] ?:
                    "$lParamsClassName(WRAP_CONTENT, WRAP_CONTENT)"

            viewGroups << new ParsedConfiguration.ViewGroupConfiguration(
                    fullyClassName: fullyClassName,
                    className: className,
                    lParamsClassName: lParamsClassName,
                    lParamsInstantiatorExpression: lParamsInstantiatorExpression
            )
        }

        def maxClassNameCharCount = viewGroups.collect { it.className.length() }.max()

        for (def viewGroup : viewGroups) {
            viewGroup.blankCount = maxClassNameCharCount - viewGroup.className.length()
        }
    }

    // --------

    def views = []

    if (conf.views instanceof List) {
        for (def viewConf : conf.views) {
            if (viewConf instanceof String) {
                viewConf = [ className: viewConf ]
            }

            if (!(viewConf instanceof Map)) continue

            def fullyClassName = viewConf['className']

            if (!(fullyClassName instanceof String)) continue
            if (fullyClassName.endsWith('.')) continue

            def className = fullyClassName.split('\\.').last()

            def instantiatorExpression = viewConf['instantiation'] ?:
                    "$fullyClassName(context)"

            views << new ParsedConfiguration.ViewConfiguration(
                    fullyClassName: fullyClassName,
                    className: className,
                    instantiatorExpression: instantiatorExpression
            )
        }
    }

    return new ParsedConfiguration(
            outPackage: outPackage, viewGroups: viewGroups, views: views)
}

// =============================================================================

class Ko5hianGenerator {
    static final def KO5HIAN_VERSION = '0.0.1'

    private static final def FILE_HEADER =
            '// Ko5hian Version: ' + KO5HIAN_VERSION

    private final File outDir
    private final ParsedConfiguration conf

    private final File runtimeFile

    Ko5hianGenerator(File outDir, ParsedConfiguration conf) {
        this.outDir = outDir
        this.conf   = conf
        runtimeFile = new File(outDir, "ko5hian/runtime.kt")
    }

    private boolean shouldWriteRuntime() {
        if (!runtimeFile.exists()) return true

        def lines

        try {
            lines = runtimeFile.readLines()
        } catch (Exception ignored) {
            runtimeFile.delete()
            return true
        }

        if (lines.isEmpty()) return true

        return lines.first() != FILE_HEADER
    }

    def writeRuntime() {
        if (!shouldWriteRuntime()) return

        runtimeFile.parentFile.mkdirs()

        runtimeFile.text = FILE_HEADER +
                """
                |package ko5hian
                |
                |import android.content.Context
                |import android.view.View
                |
                |import kotlin.contracts.*
                |
                |@DslMarker
                |@Target(AnnotationTarget.TYPE)
                |annotation class Ko5hianViewDslMarker
                |
                |inline class Ko5hianRoot(val context: Context)
                |
                |@ExperimentalContracts
                |inline fun <V : View> ko5hian(context: Context, builder: Ko5hianRoot.() -> V): V {
                |    contract {
                |        callsInPlace(builder, InvocationKind.EXACTLY_ONCE)
                |    }
                |
                |    return Ko5hianRoot(context).builder()
                |}
                |
                |const val MATCH_PARENT = android.view.ViewGroup.LayoutParams.MATCH_PARENT
                |const val WRAP_CONTENT = android.view.ViewGroup.LayoutParams.WRAP_CONTENT
                |""".stripMargin()
    }

    private static String blank(int count) {
        def builder = new StringBuilder()

        for (int i = 0; i < count; i++) {
            builder << ' '
        }

        return builder.toString()
    }

    def writeKo5hian() {
        def packageDir = new File(outDir, conf.outPackage.replace('.', '/'))

        packageDir.mkdirs()

        for (def view : conf.views) {
            def file = new File(packageDir, view.className + '.kt')

            file.text = FILE_HEADER +
                    """
                    |package $conf.outPackage
                    |
                    |import kotlin.contracts.*
                    |
                    |typealias ${view.className}On<P> = $view.fullyClassName
                    |
                    |""".stripMargin()

            for (def viewGroup : conf.viewGroups) {
                def blank = blank(viewGroup.blankCount)

                file.append(
                        "val ${view.className}On<$viewGroup.fullyClassName>$blank" +
                                ".parentView: $viewGroup.fullyClassName$blank " +
                                "get() = parent as $viewGroup.fullyClassName\n"
                )
            }

            file.append('\n')

            for (def viewGroup : conf.viewGroups) {
                def blank = blank(viewGroup.blankCount)

                file.append(
                        "val ${view.className}On<$viewGroup.fullyClassName>$blank" +
                                ".lParams: $viewGroup.lParamsClassName$blank " +
                                "get() = layoutParams as $viewGroup.lParamsClassName\n"
                )
            }

            for (def viewGroup : conf.viewGroups) {
                def blank = blank(viewGroup.blankCount)

                file.append(
                        """
                        |fun ${view.className}On<$viewGroup.fullyClassName>.lParams
                        |        (operation: (@Ko5hianViewDslMarker $viewGroup.lParamsClassName).() -> Unit)
                        |        : $viewGroup.lParamsClassName
                        |{
                        |    val lParams = lParams
                        |    layoutParams = lParams.apply(operation)
                        |    return lParams
                        |}
                        |""".stripMargin()
                )
            }
        }
    }
}
